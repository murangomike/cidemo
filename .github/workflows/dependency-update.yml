name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Check for outdated dependencies
      id: outdated
      run: |
        if npm outdated --json > outdated.json 2>/dev/null; then
          echo "has-updates=false" >> $GITHUB_OUTPUT
        else
          echo "has-updates=true" >> $GITHUB_OUTPUT
          cat outdated.json | jq .
        fi

    - name: Update dependencies
      if: steps.outdated.outputs.has-updates == 'true'
      run: |
        npm update
        npm audit fix --force

    - name: Run tests after update
      if: steps.outdated.outputs.has-updates == 'true'
      run: |
        npm run lint
        # Add more comprehensive tests here
        echo "Dependencies updated successfully"

    - name: Create Pull Request
      if: steps.outdated.outputs.has-updates == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: '🔄 Automated Dependency Update'
        body: |
          ## 🔄 Automated Dependency Update
          
          This PR updates outdated dependencies to their latest versions.
          
          ### Changes:
          - Updated npm dependencies
          - Applied security fixes with `npm audit fix`
          
          ### Testing:
          - ✅ Linting passed
          - ✅ Basic smoke tests passed
          
          Please review the changes and merge if everything looks good.
          
          ---
          *This PR was created automatically by the dependency update workflow.*
        branch: automated/dependency-update
        delete-branch: true
        labels: |
          dependencies
          automated
          maintenance

  docker-base-image-update:
    name: Check Docker Base Image Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for Node.js updates
      run: |
        # Get current Node version from Dockerfile
        CURRENT_VERSION=$(grep "FROM node:" Dockerfile | sed 's/FROM node:\([^-]*\).*/\1/')
        echo "Current Node.js version: $CURRENT_VERSION"
        
        # Check latest LTS version (you might want to use an API for this)
        echo "Consider updating to the latest Node.js LTS if needed"
        
        # This is a placeholder - in a real scenario, you'd check Docker Hub API
        # and create a PR if there's a newer version

    - name: Create issue for manual review
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const title = '🐳 Docker Base Image Update Check';
          const body = `
          ## Docker Base Image Update Check
          
          Please review if we should update our Docker base images:
          
          ### Current Images:
          - Node.js: \`node:18-alpine\`
          - PostgreSQL: \`postgres:15-alpine\`
          
          ### Action Required:
          1. Check Docker Hub for newer stable versions
          2. Test compatibility with our application
          3. Update Dockerfile if newer versions are available
          4. Update Kubernetes manifests if needed
          
          This issue is created automatically every week to remind us to check for updates.
          `;
          
          const { data: existingIssues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'docker,maintenance'
          });
          
          const hasExistingIssue = existingIssues.some(issue => 
            issue.title.includes('Docker Base Image Update Check')
          );
          
          if (!hasExistingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['docker', 'maintenance', 'enhancement']
            });
          }
